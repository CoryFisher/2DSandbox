Things to see and do


Alphabet Selection

given a spread of letters you must select the letters given by the instructions

- A to Z in order
- Z to A, reverse order
- Curvy letters,
- Straight Letters

TODO:
- abstract to data instead of letters
	- data:
		- name
		- image
		- number
		- etc...
	- "Data Selection"
	- "given a group of data you must select the correct group/sequence given by the instructions"

- 


//// WAYYYYY OVER HYPED HERE, ONLY HAVE TIME FOR PREPLANNED COMPLEXITY ESCALATION

// DATA TYPE LETTERS
- Select the Letters in order (small group of random letters, choose all in order, no penalty, selected are marked/removed)
- Select the Letters in reverse order (small group of random letters, choose all in reverse order, no penalty, no mark/remove)
- Select only the Letters in the word Myxlpiklik (required letters with duplicates and padding, choose only contained else restart, letters move/rotate/swap when selected)
- Select only the Letters that are curvy or vertically symmetrical, but not both, in reverse order (all letters, restart on fail)
- Select SEWING (a sea of Z,F,M,T,Q,C with single S,E,W,I,N,G hidden in it)






- separate Ordered from Unordered queries
	- ordered:
		- constant sorted array of data
		- iterate to completion
	- unordered:
		- subset of total set
		- remove items as selected until empty






Traffic jam/ Grid lock puzzle

Classic. Move the small object through the gridlock of varying sized (or shaped?) obejects

Things you'll need to procedurally generate levels:

A generator
	- Uses game pieces and level construction rules to construct levels

A solver
	- Makes all possible actions to move between game states and find a possible solution to a level

Rules of the game:
	- you must move the 2-tile player/car through the board from entrance to exit
		- try solving from both ends and see where they meet in the middle?
	- you can move any piece in the direction it's facing (north/south, east/west)
		- try any piece in any direction?

RULES
a) from current position try to move in any direction
b) if there is a change in the board situation, check if the situation is new or you already were in such a situation
c) if a new situation, store it along with solution depth (number of moves to get into this situation) 
d) if previously was in this situation and solution depth was equal or lower, terminate this branch. 
	Else, remove old situation (as you just got into it with less moves) and continue.

There are also other rules, 
like checking matches and thus terminating the whole process when a solution is found and later new rules when features were added, but this is the core of the solver. 
It quickly cuts whole branches without a solution. 
Beside solution depth, it also references to parent situations stored in each board situation, 
so it is easy to print the final solution in the end.